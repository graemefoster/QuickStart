name: ContainerApp

on:
  push:
    branches: [main]
    paths:
      - "Application/MicroService/**"
      - ".github/workflows/container-app.yaml"
  pull_request:
    paths:
      - "Application/MicroService/**"
      - ".github/workflows/container-app.yaml"
    branches:
      - main
  workflow_dispatch:

jobs:
  package-app:
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: ./Application/MicroService/
          push: true
          tags: |
            "ghcr.io/${{ github.actor }}/sample-microservice:latest"
            "ghcr.io/${{ github.actor }}/sample-microservice:${{github.run_number}}"

  deploy-to-test:
    needs: package-app
    runs-on: ubuntu-latest
    environment: test
    concurrency: containerapp-test
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Fetch ContainerApp Metadata"
        id: "fetchContainerAppMetadata"
        run: |
          echo "containerAppName=$(az deployment sub show -n "${{ secrets.RESOURCE_PREFIX }}-test-apps" --query "properties.outputs.containerAppName.value" -o tsv)" >> $GITHUB_OUTPUT
          echo "containerAppResourceGroup=$(az deployment sub show -n "${{ secrets.RESOURCE_PREFIX }}-test-apps" --query "properties.outputs.containerAppResourceGroup.value" -o tsv)" >> $GITHUB_OUTPUT

      - run: az config set extension.use_dynamic_install=yes_without_prompt

      - name: "Deploy new revision to test"
        # Uses the az cli to update the latest revision of the container-app. This will direct all traffic to the new revision
        run: |
          OLD_REVISION_NAME=$(az containerapp show --name '${{ steps.fetchContainerAppMetadata.outputs.containerAppName }}' --resource-group '${{ secrets.RESOURCE_PREFIX }}-test-rg' --query 'properties.latestRevisionName' -o tsv | tr -d '\r')
          echo "Current revision: $OLD_REVISION_NAME"
          
          az containerapp update \
            --name '${{ steps.fetchContainerAppMetadata.outputs.containerAppName }}' \
            --resource-group '${{ steps.fetchContainerAppMetadata.outputs.containerAppResourceGroup }}' \
            --image "ghcr.io/${{ github.actor }}/sample-microservice:${{github.run_number}}"

          az containerapp ingress traffic set \
            --name '${{ steps.fetchContainerAppMetadata.outputs.containerAppName }}' \
            --resource-group '${{ steps.fetchContainerAppMetadata.outputs.containerAppResourceGroup }}' \
            --revision-weight latest=100

          az containerapp revision deactivate \
            --revision "$OLD_REVISION_NAME" \
            --resource-group '${{ steps.fetchContainerAppMetadata.outputs.containerAppResourceGroup }}' 

  deploy-to-production-green:
    needs: deploy-to-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: prod
    concurrency: containerapp-prod
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Fetch ContainerApp Metadata"
        id: "fetchContainerAppMetadata"
        run: |
          echo "containerAppName=$(az deployment sub show -n "${{ secrets.RESOURCE_PREFIX }}-prod-apps" --query "properties.outputs.containerAppName.value" -o tsv)" >> $GITHUB_OUTPUT
          echo "containerAppResourceGroup=$(az deployment sub show -n "${{ secrets.RESOURCE_PREFIX }}-prod-apps" --query "properties.outputs.containerAppResourceGroup.value" -o tsv)" >> $GITHUB_OUTPUT

      - run: az config set extension.use_dynamic_install=yes_without_prompt

      - name: "Deploy new revision to production green slot"
        id: "deploy-new-revision"
        # Uses the az cli to update the latest revision of the container-app.
        # We need the name of the current revision so we can use it for the blue/green swap after happy testing
        run: |

          OLD_REVISION_NAME=$(az containerapp show --name '${{ steps.fetchContainerAppMetadata.outputs.containerAppName }}' --resource-group '${{ secrets.RESOURCE_PREFIX }}-prod-rg' --query 'properties.latestRevisionName' -o tsv | tr -d '\r')

          #Explicitly set old revision traffic to 100% (instead of referring to it as latest)
          #This will stop the new revision getting any traffic
          az containerapp ingress traffic set \
            --name '${{ steps.fetchContainerAppMetadata.outputs.containerAppName }}' \
            --resource-group '${{ steps.fetchContainerAppMetadata.outputs.containerAppResourceGroup }}' \
            --revision-weight $OLD_REVISION_NAME=100

          az containerapp update \
            --name '${{ steps.fetchContainerAppMetadata.outputs.containerAppName }}' \
            --resource-group '${{ steps.fetchContainerAppMetadata.outputs.containerAppResourceGroup }}' \
            --image "ghcr.io/${{ github.actor }}/sample-microservice:${{github.run_number}}"

          NEW_REVISION_FQDN=$(az containerapp show --name '${{ steps.fetchContainerAppMetadata.outputs.containerAppName }}' --resource-group '${{ secrets.RESOURCE_PREFIX }}-prod-rg' --query 'properties.latestRevisionFqdn' -o tsv | tr -d '\r')

          echo "oldRevisionName=${OLD_REVISION_NAME}" >> $GITHUB_OUTPUT
          echo "New revision can be tested at https://${NEW_REVISION_FQDN}"

    outputs:
      oldRevisionName: ${{ steps.deploy-new-revision.outputs.oldRevisionName }}

  blue-green-swap:
    needs:
      - deploy-to-production-green
    runs-on: ubuntu-latest
    concurrency: containerapp-prod
    if: github.ref == 'refs/heads/main'
    environment: prod
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - run: az config set extension.use_dynamic_install=yes_without_prompt

      - name: "Fetch ContainerApp Metadata"
        id: "fetchContainerAppMetadata"
        run: |
          echo "containerAppName=$(az deployment sub show -n "${{ secrets.RESOURCE_PREFIX }}-prod-apps" --query "properties.outputs.containerAppName.value" -o tsv)" >> $GITHUB_OUTPUT
          echo "containerAppResourceGroup=$(az deployment sub show -n "${{ secrets.RESOURCE_PREFIX }}-prod-apps" --query "properties.outputs.containerAppResourceGroup.value" -o tsv)" >> $GITHUB_OUTPUT

      - name: "Activate new revision"
        # Change the weights so the new revision takes all the traffic and the previous none (a class blue/green switch)
        run: |
          az containerapp ingress traffic set \
            --name '${{ steps.fetchContainerAppMetadata.outputs.containerAppName }}' \
            --resource-group '${{ steps.fetchContainerAppMetadata.outputs.containerAppResourceGroup }}' \
            --revision-weight latest=100
          
          az containerapp revision deactivate \
            --revision '${{ needs.deploy-to-production-green.outputs.oldRevisionName }}' \
            --resource-group '${{ steps.fetchContainerAppMetadata.outputs.containerAppResourceGroup }}' 


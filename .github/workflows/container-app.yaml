name: ContainerApp

on:
  push:
    branches: [main]
    paths:
      - "Application/MicroService/**"
  pull_request:
    paths:
      - "Application/MicroService/**"
    branches:
      - main
  workflow_dispatch:

jobs:
  package-app:
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: ./Application/MicroService/
          push: true
          tags: |
            "ghcr.io/${{ github.actor }}/sample-microservice:latest"
            "ghcr.io/${{ github.actor }}/sample-microservice:${{github.run_number}}"

  deploy-to-test:
    needs: package-app
    runs-on: ubuntu-latest
    environment: test
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Fetch ContainerApp Metadata'
        id: 'fetchContainerAppMetadata'
        run: |
          echo "containerAppName=$(az deployment sub show -n "${{ secrets.RESOURCE_PREFIX }}-test-apps" --query "properties.outputs.containerAppName.value" -o tsv)" >> $GITHUB_OUTPUT
          echo "containerAppResourceGroup=$(az deployment sub show -n "${{ secrets.RESOURCE_PREFIX }}-test-apps" --query "properties.outputs.containerAppResourceGroup.value" -o tsv)" >> $GITHUB_OUTPUT
        
      - run: az config set extension.use_dynamic_install=yes_without_prompt

      - name: "Deploy new revision to test"
        # Uses the az cli to update the latest revision of the container-app. This will direct all traffic to the new revision
        run: |
          az containerapp update \
            --name '${{ steps.fetchContainerAppMetadata.outputs.containerAppName }}' \
            --resource-group '${{ steps.fetchContainerAppMetadata.outputs.containerAppResourceGroup }}' \
            --image "ghcr.io/${{ github.actor }}/sample-microservice:${{github.run_number}}"

  # deploy-to-production-green:
  #   needs: deploy-to-test
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   environment: Production
  #   steps:
  #     - uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}
  #     - name: "Deploy new revision to production green slot"
  #       id: "deploy-new-revision"
  #       # Uses the az cli to update the latest revision of the container-app. 
  #       # We need the name of the current revision so we can use it for the blue/green swap after happy testing
  #       run: |
  #         REVISION_NAME=$(az containerapp show --name 'microservice-prod' --resource-group '${{ secrets.RESOURCE_PREFIX }}-prod-rg' --query 'latestRevisionName' -o tsv | tr -d '\r')
  #         echo "Latest revision in containerapp is ${REVISION_NAME}"
  #         NEW_REVISION_FQDN=$(az containerapp update \
  #           --name 'microservice-prod' \
  #           --resource-group '${{ secrets.RESOURCE_PREFIX }}-prod-rg' \
  #           --image "ghcr.io/${{ github.actor }}/sample-microservice:${{github.run_number}}" \
  #           --traffic-weight "latest=0,${REVISION_NAME}=100" \
  #           --query "latestRevisionFqdn" -o tsv | tr -d '\r')

  #         echo "::set-output name=newRevisionFqdn::${NEW_REVISION_FQDN}"
  #         echo "::set-output name=previousRevisionName::${REVISION_NAME}"
  #         echo "##vso[task.setvariable variable=newRevisionFqdn;isOutput=true]${NEW_REVISION_FQDN}"
  #         echo "##vso[task.setvariable variable=previousRevisionName;isOutput=true]${REVISION_NAME}"
  #         echo "New revision can be tested at https://${NEW_REVISION_FQDN}"

  #   outputs:
  #     previousRevisionName: ${{ steps.deploy-new-revision.outputs.previousRevisionName }}

  # deploy-to-production:
  #   needs:
  #     - deploy-to-production-green
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   environment: Production
  #   steps:
  #     - uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}
  #     - name: "Activate new revision"
  #       # Change the weights so the new revision takes all the traffic and the previous none (a class blue/green switch)
  #       run: |
  #         az containerapp update \
  #           --name 'microservice-prod' \
  #           --resource-group '${{ secrets.RESOURCE_PREFIX }}-prod-rg' \
  #           --traffic-weight "latest=100,${{ needs.deploy-to-production-green.outputs.previousRevisionName }}=0"          
      
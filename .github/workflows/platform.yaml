name: Platform

on:
  push:
    branches: [ main ]
    paths:
      - 'Platform/**'
  workflow_dispatch:

jobs:

  deploy-platform:
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Fetch source code
        uses: actions/checkout@v2

      - name: Login to Azure (Azure resources)
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}} 

      - name: Deploy Platform
        uses: azure/arm-deploy@v1
        id: 'platformDeploy'
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          scope: 'subscription'
          region: 'australiaeast'
          template: ./Platform/deploy-quickstart-platform.bicep
          parameters: >
            resourceSuffix=${{ secrets.RESOURCE_PREFIX }} 
            databaseAdministratorObjectId=${{ secrets.DEPLOYMENTPRINCIPAL_ID }} 
            databaseAdministratorName=${{ secrets.DEPLOYMENTPRINCIPAL_NAME }}
          failOnStdErr: true

      - name: Deploy Test Applications and Databases
        uses: azure/arm-deploy@v1
        id: 'testAppsDeploy'
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          scope: 'subscription'
          region: 'australiaeast'
          template: ./Platform/deploy-quickstart-apps.bicep
          parameters: >
            resourceSuffix=${{ secrets.RESOURCE_PREFIX }} 
            platformResourceGroupName=${{ steps.platformDeploy.outputs.platformResourceGroupName }} 
            serverFarmId=${{ steps.platformDeploy.outputs.serverFarmId }} 
            databaseServerName=${{ steps.platformDeploy.outputs.databaseServerName }}
            environmentName=test
          failOnStdErr: true

      - name: Deploy Production Applications and Databases
        uses: azure/arm-deploy@v1
        id: 'prodAppsDeploy'
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          scope: 'subscription'
          region: 'australiaeast'
          template: ./Platform/deploy-quickstart-apps.bicep
          parameters: >
            resourceSuffix=${{ secrets.RESOURCE_PREFIX }} 
            platformResourceGroupName=${{ steps.platformDeploy.outputs.platformResourceGroupName }} 
            serverFarmId=${{ steps.platformDeploy.outputs.serverFarmId }} 
            databaseServerName=${{ steps.platformDeploy.outputs.databaseServerName }}
            environmentName=prod
          failOnStdErr: true

      - name: Logout of Azure
        run: |
          az logout

      - name: Login to Azure (AAD Principals)
        uses: azure/login@v1
        with:
          creds: ${{secrets.AAD_AZURE_CREDENTIALS}}

      - name: Create AAD Applications for test web-app / web-api
        id: setup-test-aad
        run: >
          ./Platform/setup-aad.sh
          ${{ steps.testAppsDeploy.outputs.applicationHostname }} 
          ${{ steps.testAppsDeploy.outputs.apiHostname }}

      - name: Create AAD Applications for production web-app / web-api
        id: setup-prod-aad
        run: >
          ./Platform/setup-aad.sh 
          ${{ steps.prodAppsDeploy.outputs.applicationHostname }}
          ${{ steps.prodAppsDeploy.outputs.apiHostname }}

      - name: Logout of Azure
        run: |
          az logout

      - name: Login to Azure (Azure resources)
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}} 

      - name: Configure Test Applications
        uses: azure/arm-deploy@v1
        id: 'testConfigurationDeploy'
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          scope: 'subscription'
          region: 'australiaeast'
          template: ./Platform/deploy-quickstart-apps-configuration.bicep
          parameters: >
            resourceGroupName=${{ steps.testAppsDeploy.outputs.resourceGroupName }}
            databaseServerName=${{ steps.platformDeploy.outputs.databaseServerName }}
            databaseName=${{ steps.testAppsDeploy.outputs.databaseName }}
            appHostname=${{ steps.testAppsDeploy.outputs.applicationHostname }}
            apiHostname=${{ steps.testAppsDeploy.outputs.apiHostname }}
            appKeyVaultName=${{ steps.testAppsDeploy.outputs.applicationKeyVaultName }}
            appClientId=${{ steps.setup-test-aad.outputs.applicationClientId }}
            apiClientId=${{ steps.setup-test-aad.outputs.apiClientId }}
            apiUserAssignedClientId=${{ steps.testAppsDeploy.outputs.managedIdentityAppId }}
            appClientSecret=${{ steps.setup-test-aad.outputs.applicationClientSecret }}
          failOnStdErr: true

      - name: Configure Production Applications
        uses: azure/arm-deploy@v1
        id: 'productionConfigurationDeploy'
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          scope: 'subscription'
          region: 'australiaeast'
          template: ./Platform/deploy-quickstart-apps-configuration.bicep
          parameters: >
            resourceGroupName=${{ steps.prodAppsDeploy.outputs.resourceGroupName }}
            databaseServerName=${{ steps.platformDeploy.outputs.databaseServerName }}
            databaseName=${{ steps.prodAppsDeploy.outputs.databaseName }}
            appHostname=${{ steps.prodAppsDeploy.outputs.applicationHostname }}
            apiHostname=${{ steps.prodAppsDeploy.outputs.apiHostname }}
            appKeyVaultName=${{ steps.prodAppsDeploy.outputs.applicationKeyVaultName }}
            appClientId=${{ steps.setup-prod-aad.outputs.applicationClientId }}
            apiClientId=${{ steps.setup-prod-aad.outputs.apiClientId }}
            apiUserAssignedClientId=${{ steps.prodAppsDeploy.outputs.managedIdentityAppId }}
            appClientSecret=${{ steps.setup-prod-aad.outputs.applicationClientSecret }}
          failOnStdErr: true

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
      - run: dotnet restore ./SqlAadMigrationDeployer/SqlAadMigrationDeployer.csproj

      - name: Build Database Migrator
        run: dotnet build ./SqlAadMigrationDeployer/SqlAadMigrationDeployer.csproj --configuration Release --no-restore

      - name: Grant access to database to Test Api
        run: dotnet run --project ./SqlAadMigrationDeployer/SqlAadMigrationDeployer.csproj add-managed-identity "${{ steps.testAppsDeploy.outputs.databaseConnectionString }}" "${{ steps.testAppsDeploy.outputs.managedIdentityName }}" "${{ steps.testAppsDeploy.outputs.managedIdentityAppId }}" "db_owner"

      - name: Grant access to database to Production Api
        run: dotnet run --project ./SqlAadMigrationDeployer/SqlAadMigrationDeployer.csproj add-managed-identity "${{ steps.prodAppsDeploy.outputs.databaseConnectionString }}" "${{ steps.prodAppsDeploy.outputs.managedIdentityName }}" "${{ steps.prodAppsDeploy.outputs.managedIdentityAppId }}" "db_owner"

      - name: Logout of Azure
        run: |
          az logout

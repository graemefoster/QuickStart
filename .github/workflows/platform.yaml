name: Platform

on:
  push:
    branches: [ main ]
    paths:
      - 'Platform/**'
  pull_request:
    paths:
      - 'Platform/**'
    branches:
      - main
  workflow_dispatch:

jobs:

  deploy-platform-test:
    runs-on: ubuntu-latest
    environment: test
    env:
      SEPARATE_AAD_LOGIN: ${{ secrets.AAD_AZURE_CREDENTIALS != null && secrets.AAD_AZURE_CREDENTIALS != '' }}

    steps:
      - name: Fetch source code
        uses: actions/checkout@v3

      - name: Login to Azure (Azure resources)
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}} 

      - name: Deploy Platform
        uses: azure/arm-deploy@v1
        id: 'platformDeploy'
        with:
          scope: 'subscription'
          region: 'australiaeast'
          template: ./Platform/deploy-quickstart-platform.bicep
          deploymentName: '${{ secrets.RESOURCE_PREFIX }}-test-platform'
          parameters: >
            resourcePrefix=${{ secrets.RESOURCE_PREFIX }} 
            databaseAdministratorObjectId=${{ secrets.DEPLOYMENTPRINCIPAL_ID }} 
            databaseAdministratorName=${{ secrets.DEPLOYMENTPRINCIPAL_NAME }}
            environmentName=test
            apimPublisherEmail=${{ secrets.APIM_PUBLISHER_EMAIL }}
          failOnStdErr: false # container-apps produces warning

      - name: Logout of Azure
        if: ${{ env.SEPARATE_AAD_LOGIN }}
        run: |
          az logout

      - name: Login to Azure (AAD Principals)
        if: ${{ env.SEPARATE_AAD_LOGIN }}
        uses: azure/login@v1
        with:
          creds: ${{secrets.AAD_AZURE_CREDENTIALS}}

      - name: Create AAD Applications for test web-app / web-api
        id: setup-test-aad
        run: >
          ./Platform/setup-aad.sh
          ${{ secrets.RESOURCE_PREFIX }} 
          test
          ${{ steps.platformDeploy.outputs.uniqueness }}

      - name: Logout of Azure
        if: ${{ env.SEPARATE_AAD_LOGIN }}
        run: |
          az logout

      - name: Login to Azure (Azure resources)
        if: ${{ env.SEPARATE_AAD_LOGIN }}
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}} 

      - name: Deploy Test Applications and Databases
        uses: azure/arm-deploy@v1
        id: 'appsDeploy'
        with:
          scope: 'subscription'
          region: 'australiaeast'
          template: ./Platform/deploy-quickstart-apps.bicep
          deploymentName: '${{ secrets.RESOURCE_PREFIX }}-test-apps'
          parameters: >
            resourcePrefix=${{ secrets.RESOURCE_PREFIX }} 
            environmentName=test
            appClientId=${{ steps.setup-test-aad.outputs.applicationClientId }}
            apiClientId=${{ steps.setup-test-aad.outputs.apiClientId }}
            aadTenantId=${{ steps.setup-test-aad.outputs.aadTenantId }}
            appClientSecret=${{ steps.setup-test-aad.outputs.applicationClientSecret }}
          failOnStdErr: false

      - name: Deploy Api into APIm
        uses: azure/arm-deploy@v1
        id: 'testConfigurationDeploy'
        with:
          scope: 'subscription'
          region: 'australiaeast'
          template: ./Platform/deploy-quickstart-apim.bicep
          deploymentName: '${{ secrets.RESOURCE_PREFIX }}-test-apim'
          parameters: >
            resourcePrefix=${{ secrets.RESOURCE_PREFIX }} 
            environmentName=test
          failOnStdErr: true

      - name: "Get access token to generate diagram"
        id: diagram-prerequisistes
        run: |
          token=$(az account get-access-token --query accessToken -o tsv --query "accessToken")
          echo "::add-mask::$token" 
          echo "token=$token" >> $GITHUB_OUTPUT
          echo "subscriptionId=$(az account show --query "id" --output tsv)" >> $GITHUB_OUTPUT

      - name: Generate Digram
        uses: graemefoster/azurediagramsgithubactionsdocker@v0.1.4
        with:
          subscriptionId: ${{ steps.diagram-prerequisistes.outputs.subscriptionId }}
          resourceGroup: "${{ secrets.RESOURCE_PREFIX }}*"
          outputFileName: "azurediagram.drawio"
          accessToken: ${{ steps.diagram-prerequisistes.outputs.token }}

      - uses: actions/upload-artifact@v3
        with:
          name: azure-diagram
          path: './azurediagram.drawio.png'

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'
      - run: dotnet restore ./SqlAadMigrationDeployer/SqlAadMigrationDeployer.csproj

      - name: Build Database Migrator
        run: dotnet build ./SqlAadMigrationDeployer/SqlAadMigrationDeployer.csproj --configuration Release --no-restore

      - name: Grant access to database to Test Api
        run: dotnet run --project ./SqlAadMigrationDeployer/SqlAadMigrationDeployer.csproj add-managed-identity "${{ steps.appsDeploy.outputs.databaseConnectionString }}" "${{ steps.appsDeploy.outputs.managedIdentityName }}" "${{ steps.appsDeploy.outputs.managedIdentityAppId }}" "db_owner"

      - name: Logout of Azure
        run: |
          az logout


  # deploy-platform-prod:
  #   runs-on: ubuntu-latest
  #   environment: Production
  #   if: github.ref == 'refs/heads/main'
  #   needs:
  #     - deploy-platform-test
  #   env:
  #     SEPARATE_AAD_LOGIN: ${{ secrets.AAD_AZURE_CREDENTIALS != null && secrets.AAD_AZURE_CREDENTIALS != '' }}

  #   steps:
  #     - name: Fetch source code
  #       uses: actions/checkout@v3

  #     - name: Login to Azure (Azure resources)
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{secrets.AZURE_CREDENTIALS}} 

  #     - name: Deploy Production Platform
  #       uses: azure/arm-deploy@v1
  #       id: 'platformDeploy'
  #       with:
  #         scope: 'subscription'
  #         region: 'australiaeast'
  #         template: ./Platform/deploy-quickstart-platform.bicep
  #         parameters: >
  #           resourcePrefix=${{ secrets.RESOURCE_PREFIX }} 
  #           databaseAdministratorObjectId=${{ secrets.DEPLOYMENTPRINCIPAL_ID }} 
  #           databaseAdministratorName=${{ secrets.DEPLOYMENTPRINCIPAL_NAME }}
  #           environmentName=prod
  #           apimPublisherEmail=${{ secrets.APIM_PUBLISHER_EMAIL }}
  #           deploymentName=quickstart-${{ secrets.RESOURCE_PREFIX }}
  #         failOnStdErr: false

  #     - name: Deploy Production Applications and Databases
  #       uses: azure/arm-deploy@v1
  #       id: 'appsDeploy'
  #       with:
  #         scope: 'subscription'
  #         region: 'australiaeast'
  #         template: ./Platform/deploy-quickstart-apps.bicep
  #         parameters: >
  #           environmentName=prod
  #           platformName=quickstart-${{ secrets.RESOURCE_PREFIX }}
  #         failOnStdErr: false

  #     - name: Logout of Azure
  #       if: ${{ env.SEPARATE_AAD_LOGIN }}
  #       run: |
  #         az logout

  #     - name: Login to Azure (AAD Principals)
  #       if: ${{ env.SEPARATE_AAD_LOGIN }}
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{secrets.AAD_AZURE_CREDENTIALS}}

  #     - name: Create AAD Applications for production web-app / web-api
  #       id: setup-prod-aad
  #       run: >
  #         ./Platform/setup-aad.sh 
  #         ${{ steps.appsDeploy.outputs.applicationHostname }}
  #         ${{ steps.appsDeploy.outputs.apiHostname }}
  #         ${{ steps.appsDeploy.outputs.spaHostname }}

  #     - name: Logout of Azure
  #       if: ${{ env.SEPARATE_AAD_LOGIN }}
  #       run: |
  #         az logout

  #     - name: Login to Azure (Azure resources)
  #       if: ${{ env.SEPARATE_AAD_LOGIN }}
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{secrets.AZURE_CREDENTIALS}} 

  #     - name: Configure Production Applications
  #       uses: azure/arm-deploy@v1
  #       id: 'productionConfigurationDeploy'
  #       with:
  #         scope: 'subscription'
  #         region: 'australiaeast'
  #         template: ./Platform/deploy-quickstart-apps-configuration.bicep
  #         parameters: >
  #           appClientId=${{ steps.setup-prod-aad.outputs.applicationClientId }}
  #           apiClientId=${{ steps.setup-prod-aad.outputs.apiClientId }}
  #           appClientSecret=${{ steps.setup-prod-aad.outputs.applicationClientSecret }}
  #           environmentName=prod
  #         failOnStdErr: true

  #     - name: Setup dotnet
  #       uses: actions/setup-dotnet@v3
  #       with:
  #         dotnet-version: '7.0.x'
  #     - run: dotnet restore ./SqlAadMigrationDeployer/SqlAadMigrationDeployer.csproj

  #     - name: Build Database Migrator
  #       run: dotnet build ./SqlAadMigrationDeployer/SqlAadMigrationDeployer.csproj --configuration Release --no-restore

  #     - name: Grant access to database to Production Api
  #       run: dotnet run --project ./SqlAadMigrationDeployer/SqlAadMigrationDeployer.csproj add-managed-identity "${{ steps.appsDeploy.outputs.databaseConnectionString }}" "${{ steps.appsDeploy.outputs.managedIdentityName }}" "${{ steps.appsDeploy.outputs.managedIdentityAppId }}" "db_owner"

  #     - name: Logout of Azure
  #       run: |
  #         az logout

name: Api

env:
  PACKAGE_PATH: './packages'      # set this to the path to your web app project, defaults to the repository root

on:
  push:
    branches: [ main ]
    paths:
      - 'Application/Api/**'
  pull_request:
    paths:
      - 'Application/Api/**'
    branches:
      - main
  workflow_dispatch:
    
jobs:

  build-database-deployer:
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'
    - run: dotnet restore
    - run: dotnet build ./SqlAadMigrationDeployer/SqlAadMigrationDeployer.csproj --configuration Release --no-restore
    - run: dotnet publish ./SqlAadMigrationDeployer/SqlAadMigrationDeployer.csproj -c Release -o '${{ env.PACKAGE_PATH }}/database-deployer'
    - uses: actions/upload-artifact@v2
      name: 'Upload Database Deployer package'
      with:
        name: database-deployer
        path: '${{ env.PACKAGE_PATH }}/database-deployer/**'

  build-and-test-api:
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'
    - run: dotnet restore
    - run: dotnet build ./Application/Api/SimpleApiWithDatabase/SimpleApiWithDatabase.csproj --configuration Release --no-restore
    - run: dotnet test ./Application/Api/ApiTests/ApiTests.csproj --no-restore
    - run: dotnet publish ./Application/Api/SimpleApiWithDatabase/SimpleApiWithDatabase.csproj -c Release -o '${{ env.PACKAGE_PATH }}/published-api'
    - uses: actions/upload-artifact@v2
      name: 'Upload Api package'
      with:
        name: api
        path: '${{ env.PACKAGE_PATH }}/published-api/**'
    - uses: actions/upload-artifact@v2
      name: 'Upload Database script'
      with:
        name: database-script
        path: './Application/DatabaseUpgrades/*.sql'

  deploy-to-test:
    needs:
      - build-database-deployer
      - build-and-test-api
    runs-on: ubuntu-latest
    environment: Test
    steps:
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: 'Download package'
      uses: actions/download-artifact@v2
      with:
        name: api
        path: api
    - name: 'Download database script'
      uses: actions/download-artifact@v2
      with:
        name: database-script
        path: database-script

    - name: 'Download database deployer'
      uses: actions/download-artifact@v2
      with:
        name: database-deployer
        path: database-deployer

    - name: 'Update Database'
      run: dotnet ./database-deployer/SqlAadMigrationDeployer.dll migrate "${{  secrets.AZURE_SQL_CONNECTION_STRING }}" "./database-script/build-database.sql"

    - uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ secrets.AZURE_WEBAPI_NAME }}
        package: './api/'
    - name: logout
      run: |
        az logout


  deploy-to-production-green:
    needs:
      - deploy-to-test
    runs-on: ubuntu-latest
    environment: Production
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: 'Download package'
      uses: actions/download-artifact@v2
      with:
        name: api
        path: api
    - name: 'Download database script'
      uses: actions/download-artifact@v2
      with:
        name: database-script
        path: database-script

    - name: 'Download database deployer'
      uses: actions/download-artifact@v2
      with:
        name: database-deployer
        path: database-deployer

    - name: 'Update Database'
      run: dotnet ./database-deployer/SqlAadMigrationDeployer.dll migrate "${{  secrets.AZURE_SQL_CONNECTION_STRING }}" "./database-script/build-database.sql"

    - uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ secrets.AZURE_WEBAPI_NAME }}
        package: './api/'
        slot-name: 'green'
    - name: logout
      run: |
        az logout

  deploy-to-production:
    needs:
      - deploy-to-production-green
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - run: az webapp deployment slot swap --slot green --action swap --name ${{ secrets.AZURE_WEBAPI_NAME }} --resource-group '${{ secrets.RESOURCE_PREFIX }}-api-rg' 

